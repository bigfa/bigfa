<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on Untitled</title><link>https://bigfa.github.io/category/hugo/</link><description>Recent content in Hugo on Untitled</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 27 Jun 2024 10:11:35 +0800</lastBuildDate><atom:link href="https://bigfa.github.io/category/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo 主题 Farallon</title><link>https://bigfa.github.io/story/hugo-theme-farallon/</link><pubDate>Mon, 30 Oct 2023 21:07:22 +0800</pubDate><guid>https://bigfa.github.io/story/hugo-theme-farallon/</guid><description>Hugo 主题 Farallon 本主题使用古法制作，不依赖三方框架。
Hugo 当前版本 0.3.1，最后更新日期 2023/11/10
演示地址 使用指南 站点参数设置 以下参数都在[Params]下
description 类型: 字符串 站点描述
mainSections 类型：数组 默认值：['story'] 多语言设置 设置配置文件中DefaultContentLanguage参数来选择语音，默认是en，翻译文件在i18n 目录下，支持以下类型，
en 英文 zh-cn 简体中文 例如想试用简体中文，则设置DefaultContentLanguage为zh-cn
状态文章格式 content 目录下创建一个memo文件夹，里面就是正常的文章 md 文件
hugo new content memo/1.md 站点参数配置
[Params] mainSections = [&amp;#39;story&amp;#39;,&amp;#39;memo&amp;#39;] 如果你想用其他别名也可以，memo换为你想用的就可以了。
卡片分类页面使用方法 在content目录下新建你想要使用模版的页面，比如你的分类是travel，则新建categories/travel/_index.md,然后编辑文件，设置layout为travel 即可
--- title: &amp;#34;旅行&amp;#34; description: &amp;#34;旅行体验&amp;#34; layout: travel --- 作者信息 站点配置参数
[Params] showAuthor = true authorName = &amp;#39;bigfa&amp;#39; authorDescription = &amp;#39;computer loser&amp;#39; authorAvatar = &amp;#39;https://secure.gravatar.com/avatar/2fd7e2e17a671f8e3fade0706e0a667e?s=128&amp;amp;d=mm&amp;amp;r=g&amp;#39; 搜索 推荐使用algolia，个人小站免费额度够用了。</description></item><item><title>Hugo 简明教程 05</title><link>https://bigfa.github.io/story/hugo-starter-05/</link><pubDate>Thu, 27 Jun 2024 10:11:35 +0800</pubDate><guid>https://bigfa.github.io/story/hugo-starter-05/</guid><description>本文主要讲解 hugo 目录结构和主题目录结构的基本逻辑。Hugo 中有一些概念如 UnionFS,Hugo pipes 对普通用户来说很难理解，我这里尽量用白话来解释，可能不是很准确，但能让你大致理解 hugo 的文件逻辑。
联合文件系统 首先要理解一个概念就是 Union file system（联合文件系统），简单来说就是可以多个目录挂载到同一个位置。当两个或多个文件具有相同路径的时候，优先级的顺序遵循挂载的顺序。比如可以将任意目录挂载到content文件夹下。 配置文件如下hugo.yaml，用白话来讲就是合并多个文件夹，路径相同的时候前面的优先。
module: mounts: - source: content target: content - source: /home/rich/shared-content target: content 这样/home/rich/shared-content 下的 markdown 文件也会被视为content下的内容，一般情况下普通用户不会这么操作。但是我们修改主题的时候，可以通过在项目目录的相同位置放置一个副本来覆盖主题的模板。这也是我推荐的修改主题的方法，可以做到不污染原主题文件，以免更新主题的时候修改的部分被覆盖。
主题目录 下面介绍一下 hugo 主题的目录结构，使用 hugo new theme 命令创建的初始目录如下。
farallon/ ├── archetypes/ ├── assets/ ├── data/ ├── i18n/ ├── layouts/ ├── static/ ├── LICENSE ├── README.md ├── hugo.toml └── theme.toml archetypes 原型文件，前面的文章已经讲过。
assets 和 static static 目录下的文件在构建后会被原样复制到public 文件夹下，assets则可以用来存放一些编译前的文件如 scss、typescript 等，assets 文件夹下的文件可以使用resources.</description></item><item><title>Hugo 使用 Cloudflare Worker 实现文章评论</title><link>https://bigfa.github.io/story/hugo-cf-comment/</link><pubDate>Thu, 20 Jun 2024 19:11:24 +0800</pubDate><guid>https://bigfa.github.io/story/hugo-cf-comment/</guid><description>项目地址 ，已经和点赞评论聚合为一个项目。
直接 git clone 或者 use template.
需要手动修改 wrangler.toml 设置跨域域名和绑定d1数据库。
[vars] DOMAIN = &amp;#34;https://bigfa.github.io&amp;#34; 这个域名是你要跨域的域名，可以设置为*，这样就没有任何限制了。
[[d1_databases]] binding = &amp;#34;DB&amp;#34; database_name = &amp;#34;hugo-cf-d1&amp;#34; database_id = &amp;#34;81e23e8a-3b26-4025-acf8-1123bfd5af74&amp;#34; database_name 和 database_id 是你需要修改的，可在 Cloudflare 后台看到。
优点 不依赖啥框架，原生 js，方便自行维护 部署在 cloudflare 上，免费切数据可控 缺点 暂无管理后台，不方便管理评论 非傻瓜式部署 后续准备弄一个后台管理页面直接部署在 cloudflare pages 上。
本地开发 Cloudflare 的命令行工具是 wrangler，需要 nodejs 环境。wrangler 使用过程中如果没登陆授权会弹出网页授权，授权即可。
进入项目目录，安装依赖。
npm install 创建数据库，如果已经在后台创建则无需执行这一步。
npx wrangler d1 execute create hugo-cf-d1 本地创建数据表，Cloudflare 本地和远程是分开的，如果后续手动部署，则需要在远程生产环境数据库创建表。
npx wrangler d1 execute hugo-cf-d1 --local --file=.</description></item><item><title>Docker 自动同步豆瓣书影音记录</title><link>https://bigfa.github.io/story/douban-docker/</link><pubDate>Fri, 07 Jun 2024 20:27:46 +0800</pubDate><guid>https://bigfa.github.io/story/douban-docker/</guid><description>前阵子写了一个 Cloudflare Worker 版的同步书影音记录，个人觉得对于个人博客来说已经足够了，但可能一些同学介意 Cloudflare 的网络问题，于是我构建了一个 Docker 镜像，适合有国内服务器的同学使用。
首先需要安装 Docker 和 Docker compose，根据你的服务器自行寻找安装方法。
构建 创建一个docker-compose.yml文件，示例
version: &amp;#39;3&amp;#39; services: douban-docker: image: fatesinger/douban:latest container_name: douban-docker volumes: - assets:/app/static environment: MONGO_URI: mongodb://mongo:27017/fatesinger DBID: 54529369 DOMAIN: https://node.wpista.com depends_on: - mongo ports: - 8000:3000 networks: - shared-network mongo: image: mongo:4.4.29 container_name: mongo restart: &amp;#34;always&amp;#34; volumes: # Persist mongodb data - database:/data/db ports: - &amp;#34;27017:27017&amp;#34; networks: - shared-network volumes: assets: driver: local name: assets database: driver: local name: mongodb_data networks: shared-network: Nignx 配置 server { listen 80; server_name example.</description></item><item><title>Hugo 简明教程 04</title><link>https://bigfa.github.io/story/hugo-starter-04/</link><pubDate>Wed, 29 May 2024 17:05:06 +0800</pubDate><guid>https://bigfa.github.io/story/hugo-starter-04/</guid><description>本文主要讲解 hugo 的部署方法。
build 命令 除了基础的 hugo build 其实 build命令支持不少参数，下面介绍一下比较有用的参数。
-b, --baseURL string 绑定域名, 比如 https://fatesinger.com/ -D, --buildDrafts 包含草稿 -E, --buildExpired 包含过期内容 -F, --buildFuture 包含日期在将来的内容 -c, --contentDir string content 目录，一班不需要改 --disableKinds strings 禁用页面类型，同时生成多个站点时有用 --gc 构建完成后移除部分缓存 --ignoreCache 忽略缓存 --minify 压缩html -t, --theme strings 要使用的主题，同时生成多个站点时有用 一般来说，默认 hugo build 就可以了，像我这种多平台多域名多主题部署这些参数才有意义。
手动部署 绝大部分人都推荐的方法是通过 github actions 自动部署，我个人觉的手动部署也很方便。自动部署也只不过在云端进行手动部署的步骤而已。简单来说 hugo 部署就两步
使用 hugo build 命令生成 html 文件 将生成的文件上传到托管平台或者服务器 执行完构建命令后你可以把生成的 html 文件上传到任何你喜欢的平台。如果你没有特别的需求甚至也不需要用 git 来原理仓库，毕竟对于普通用户来说，各种命令难以理解。
本地手动部署还有一个优点就是构建速度很快，一般 PC 的配置还是要比服务器的配置强一点，尤其 Mac 的 ssd，构建速度很快。手动上传也可以克服各种网络困难。如果你上传到自己的服务器，那么你还需要部署一个简单的 nginx 服务，因为是纯静态，所以只需要傻瓜配置。</description></item><item><title>Hugo 简明教程 03</title><link>https://bigfa.github.io/story/hugo-starter-03/</link><pubDate>Wed, 29 May 2024 17:04:24 +0800</pubDate><guid>https://bigfa.github.io/story/hugo-starter-03/</guid><description>本文主要介绍原型（archetypes）和 markdown 文件的使用方法。
本系列文章均可参考我的 hugo 博客项目 ，具体内容在里面均有体现。
archetype 原型 archetype 可以理解为模版，当使用 hugo new content 命令创建新文件的时候会根据一定的规则选择对应的模版，相当于文章的默认设置。默认是主题目录下下的archetypes/default.md，当然你的站点目录可能也有一个archetypes目录，这里面的模版的优先级是大于主题目录下的archetypes。
你可以为一个或多个内容类型创建一个原型（archetype）。如下，当创建 posts类型的时候会使用 posts.md，其他类型则会使用默认设置。
hugo new content posts/my-first-post.md 文件结构
archetypes/ ├── default.md └── posts.md 当你站点内容较为复杂的时候合理使用原型会更方便，如果只有一个文章类型，那么直接复制已有的 markdown 文件也足够了。
原型文件查找顺序 根目录下的原型优先级是最高的，爱折腾的同学可能有非常多的自定义设置，合理使用原型初始化更加方便。
archetypes/posts.md archetypes/default.md themes/my-theme/archetypes/posts.md themes/my-theme/archetypes/default.md 原型中也有一些简单的表达式可以使用，如.Date，但是这个值是文件发创建时间，不等于文章发布时间，目前还没办法自动修改这个时间为发布时间。
Markdown 文件 Hugo 以及绝大多数静态网页生成器都是 markdown 转 html，在文件数量不多的情况下各种程序没有任何区别，因为最后都是转为html文件。在文件多的时候不同程序可能构建速度不太一样，这里推荐大家单独管理图片文件，这样能大大提升构建速度。大量图片同时也意味着上传时间大大增加，所以不推荐直接把图片放在项目目录下。
Hugo 中 markdwon 文件简单来说可以分为两个部分，一部分是元数据，另一部分则为正文内容。位于每个内容文件顶部的前言部分是元数据，简单来讲可以理解为 wordpress 中的wp_postmeta，你可以在 params 参数中自定义各种类型的数据，然后在循环中通过.Params来调用。
除了params，hugo 内置了一些功能性的字段，下面是一个简单的例子。
--- date: 2024-02-02T04:14:54-08:00 draft: false params: author: John Smith title: Example weight: 10 layout: page categories: [&amp;#34;gears&amp;#34;] tags: [&amp;#34;fujifilm&amp;#34;] --- 标题、分类、标签、发布时间等比较好理解，下面单独介绍一下功能性参数。</description></item><item><title>Hugo 简明教程 02</title><link>https://bigfa.github.io/story/hugo-starter-02/</link><pubDate>Wed, 29 May 2024 17:02:35 +0800</pubDate><guid>https://bigfa.github.io/story/hugo-starter-02/</guid><description>本文主要介绍 Hugo 内容文件管理和页面 URL 设置，建议搭配我的 GitHub Pages 项目使用。
页面类型 Hugo 的页面类型主要有以下几个，还有一些特殊的功能性页面如 rss 这里就不做讨论了。
home 首页 page 可以理解为文章详情页和一些指定页面如关于和固定连接 section 可以理解为一类文章的归档的页面 taxonomy 可以理解为分类、标签的归档页，就是列出所有分类、标签的聚合页面。 term 分类、标签等文章列表页，列出属于某个分类、标签下文章列表的页面 RSS、网站地图、robotsTXT 和 404 页面类型，但这些只在渲染各自页面类型时可用，因此在任何页面集合中都不可用。
内容管理 众所周知，hugo 的 markdown 文件都在 content 目录下，也就是存放文章的地方，hugo 的作用就是把这些 markdown 文件转换为 html。默认情况下content文件夹下的所有 markdown 文件都会被认为是常规内容页面（RegularPages）。
当然，我们在实际使用过程中，可能会新建一个 posts 文件夹，或者按日期创建文件夹来管理文件，这个时候就要理解 section 这个概念，简单来说就是一个文章类型，如果常规文章 post 和状态内容 status。在 Hugo 中，顶级目录（content 文件夹下的一级目录）或者是带有 _index.md 文件的任何内容目录都会被认为是section。这里推荐为所有 section 都创建_index.md 文件。
不过也不是所有的顶级目录都会被视为 section，当在配置中被指定为taxonomies 时，就不会被认为是 section 了，如下配置中，此时顶级目录categories和tags不会被认为是 section。
[taxonomies] category = &amp;#39;categories&amp;#39; tag = &amp;#39;tags&amp;#39; 我推荐为每个分类都创建一个 markdown 文件，因为 markdown 文件可以存储一些元信息，所以我们可以通过这些文件来个分类设置封面、描述等信息，甚至可以设置单独的模版。</description></item><item><title>使用 Cloudflare Worker 获取豆瓣书影音记录</title><link>https://bigfa.github.io/story/douban-cf-worker/</link><pubDate>Wed, 15 May 2024 17:41:48 +0800</pubDate><guid>https://bigfa.github.io/story/douban-cf-worker/</guid><description>本功能直接解决豆瓣书影音记录两大痛点，自动同步和封面本地化，对于普通用户来说，Cloudflare 的免费版足够了，非常推荐使用。
项目地址 之前我自己用 nodejs + mysql 写了一个同步豆瓣书影音的服务，但只在一个很隐蔽的地方公开了，主要是流量和数据库压力太大，提供公共服务成本实在是太高，最近在研究 Cloudflare Worker，试着把服务迁移过去，过程中发现几个问题。
D1 单次请求操作次数是有限制的，最多一千次，读写都算。 Worker 子请求数最多就是 50 次，下载图片是占用这个次数的，初始化的时候如果下载图片基本都会超限失败。 Worker 直接读取 R2 输出图片的话速度很慢。 不过多次测试之后还是找到了使用方法，虽然免费版有各种限制，但限制的都是单次请求，初始化的时候数据比较多，只需要在本地分页之后调用初始化接口就行了，后续使用定时任务同步不会因为请求过多而超限，除非在短时间内标记了大量内容。
电影
星际迷航4 0.0 2028 / 美国 / 动作 科幻 惊悚 冒险 / 克里斯·派恩 扎克瑞·昆图 音乐
The Tortured Poets Department 6.8 泰勒·斯威夫特 Taylor Swift / 2024 图书
世上为什么要有图书馆 9.1 杨素秋 / 2024 / 上海译文出版社 为了简化数据库使用单表、所以电影不再支持类型了。新的单条目引用不会在标记列表中展示，后续如果该条目被标记则会自动更新，取消标记不会被同步。
自动同步使用了 Cloudflare 的 cron 触发器，实测还是比较好用的。同步时间可以根据自己的需求设置，默认配置是每 30 分钟同步一次。
crons = [&amp;#34;*/30 * * * *&amp;#34;] 如果未进行初始化直接进行同步，可能会因为 D1 操作次数过多报错而无法同步老数据，这时需要清空数据重新初始化，建议 worker 部署后第一时间初始化。</description></item><item><title>Hugo 使用 Cloudflare Worker 实现文章浏览计数与点赞</title><link>https://bigfa.github.io/story/hugo-cf-worker/</link><pubDate>Mon, 13 May 2024 15:31:20 +0800</pubDate><guid>https://bigfa.github.io/story/hugo-cf-worker/</guid><description>一直以来我对静态博客都没什么兴趣，主要原因是静态博客都是 MD 文件转网页，各种平台都是大同小异，只展示博文还好，如果实现一些其他计数功能，如点赞评论啥的都要额外部署服务，这样还不如直接用动态博客了。如果有研究过我的 hugo 主题会发现我的数据存储都是使用 Markdown 文章文件的，也算原汁原味的静态博客。
引入外部服务理论上啥功能都能实现，但那其实和静态博客已经没啥关系了。前阵子 Google domains 停止服务，我就把域名转到了 Cloudflare，顺便研究了一下自带的功能，发现用 Cloudflare 的免费方案搭建一个简单的数据统计服务是没啥成本的，于是就有了本文。
Cloudflare 免费方案的额度对普通用户来说完全够用，如果不够用付费就好了，毕竟大流量也很容易变现。 Cloudflare Worker 的域名无法直接访问，需要自己绑定域名。 前端调用需要解决跨域问题。 静态博客没有文章 id 的概念，需要设置一个 key，hugo 有个文件路径的 md5 可以作为 UniqueId。 项目地址 直接 git clone 或者 use template.
需要手动修改 wrangler.toml 设置跨域域名和绑定d1数据库。
[vars] DOMAIN = &amp;#34;https://bigfa.github.io&amp;#34; 这个域名是你要跨域的域名，可以设置为*，这样就没有任何限制了。
[[d1_databases]] binding = &amp;#34;DB&amp;#34; database_name = &amp;#34;hugo-cf-d1&amp;#34; database_id = &amp;#34;81e23e8a-3b26-4025-acf8-1123bfd5af74&amp;#34; database_name 和 database_id 是你需要修改的，可在 Cloudflare 后台看到。
本地开发 Cloudflare 的命令行工具是 wrangler，需要 nodejs 环境。wrangler 使用过程中如果没登陆授权会弹出网页授权，授权即可。
进入项目目录，安装依赖。
npm install 创建数据库，如果已经在后台创建则无需执行这一步。</description></item><item><title>Hugo 主题 Notability</title><link>https://bigfa.github.io/story/hugo-theme-notability/</link><pubDate>Mon, 30 Oct 2023 22:27:17 +0800</pubDate><guid>https://bigfa.github.io/story/hugo-theme-notability/</guid><description>抽时间复活了一下这个远古主题，十分简洁。
最新版本0.3.0，最后更新时间2023/11/20.
首页截图 文章页截图 本主题使用古法制作，不依赖三方框架。
演示地址 项目地址 使用指南 站点参数设置 以下参数都在[Params]下
description 类型: 字符串 站点描述
mainSections 类型：数组 默认值：['story'] 多语言设置 设置配置文件中DefaultContentLanguage参数来选择语音，默认是en，翻译文件在i18n 目录下，支持以下类型，
en 英文 zh-cn 简体中文 例如想试用简体中文，则设置DefaultContentLanguage为zh-cn
状态文章格式 content 目录下创建一个memo文件夹，里面就是正常的文章 md 文件
hugo new content memo/1.md 站点参数配置
[Params] mainSections = [&amp;#39;story&amp;#39;,&amp;#39;memo&amp;#39;] 如果你想用其他别名也可以，memo换为你想用的就可以了。
作者信息 站点配置参数
[Params] showAuthor = true authorName = &amp;#39;bigfa&amp;#39; authorDescription = &amp;#39;computer loser&amp;#39; authorAvatar = &amp;#39;https://secure.gravatar.com/avatar/2fd7e2e17a671f8e3fade0706e0a667e?s=128&amp;amp;d=mm&amp;amp;r=g&amp;#39; 内链卡片 短代码
~{~{&amp;lt;link &amp;#34;garden-pavilion&amp;#34;&amp;gt;~}~} 自行取掉多余字符
榕阁 Garden Pavilion榕阁 周末和领导去吃了一顿柏悦的榕阁，之前看到大众点评上人均消费要七八百一直望而却步，这次趁着住店就体验了一把。先直接说 … 国内用户特别设置 物品列表使用方法 在content目录下新建gears/_index.md，按照下面的格式设置faves字段即可
--- title: &amp;#34;Gears&amp;#34; subtitle: &amp;#34;my fuji gears&amp;#34; date: 2021-03-06T15:39:00-06:00 draft: false faves: [ { &amp;#34;title&amp;#34;: &amp;#34;instax mini 40™&amp;#34;, &amp;#34;cover&amp;#34;: &amp;#34;https://static.</description></item></channel></rss>